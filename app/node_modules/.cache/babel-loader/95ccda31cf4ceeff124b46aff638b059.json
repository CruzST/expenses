{"ast":null,"code":"import { ACCESS_TOKEN, SECRET } from \"../Components/Constants/index.js\";\n\nvar jwt = require(\"jsonwebtoken\");\n\nclass Authenticate {\n  // constructor\n  // methods\n  isLoggedIn() {\n    let token = localStorage.getItem(ACCESS_TOKEN);\n\n    if (token) {\n      // add -> redux, if decodedtoken sub is XXX then make admin, else normal user\n      return true;\n    }\n\n    return false;\n  }\n  /* Function will access the local storage for the access token and return the sub # which is relevant to the user ID */\n\n\n  getUser() {\n    let token = localStorage.getItem(ACCESS_TOKEN);\n    let decode = jwt.verify(token, SECRET);\n    return decode.sub;\n  }\n\n  removeToken() {\n    localStorage.removeItem(ACCESS_TOKEN);\n  }\n\n}\n\nexport default new Authenticate();","map":{"version":3,"sources":["C:\\Users\\Steve\\Documents\\OSU\\Side Projects\\Expenses\\expenses\\app\\src\\Utils\\authenicate.js"],"names":["ACCESS_TOKEN","SECRET","jwt","require","Authenticate","isLoggedIn","token","localStorage","getItem","getUser","decode","verify","sub","removeToken","removeItem"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,MAAvB,QAAqC,kCAArC;;AACA,IAAIC,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAjB;;AAEA,MAAMC,YAAN,CAAmB;AACjB;AAEA;AACAC,EAAAA,UAAU,GAAG;AACX,QAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBR,YAArB,CAAZ;;AACA,QAAIM,KAAJ,EAAW;AACT;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;AAED;;;AACAG,EAAAA,OAAO,GAAG;AACR,QAAIH,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBR,YAArB,CAAZ;AACA,QAAIU,MAAM,GAAGR,GAAG,CAACS,MAAJ,CAAWL,KAAX,EAAkBL,MAAlB,CAAb;AAEA,WAAOS,MAAM,CAACE,GAAd;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZN,IAAAA,YAAY,CAACO,UAAb,CAAwBd,YAAxB;AACD;;AAvBgB;;AAyBnB,eAAe,IAAII,YAAJ,EAAf","sourcesContent":["import { ACCESS_TOKEN, SECRET } from \"../Components/Constants/index.js\";\r\nvar jwt = require(\"jsonwebtoken\");\r\n\r\nclass Authenticate {\r\n  // constructor\r\n\r\n  // methods\r\n  isLoggedIn() {\r\n    let token = localStorage.getItem(ACCESS_TOKEN);\r\n    if (token) {\r\n      // add -> redux, if decodedtoken sub is XXX then make admin, else normal user\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* Function will access the local storage for the access token and return the sub # which is relevant to the user ID */\r\n  getUser() {\r\n    let token = localStorage.getItem(ACCESS_TOKEN);\r\n    let decode = jwt.verify(token, SECRET);\r\n\r\n    return decode.sub;\r\n  }\r\n\r\n  removeToken() {\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n  }\r\n}\r\nexport default new Authenticate();\r\n"]},"metadata":{},"sourceType":"module"}