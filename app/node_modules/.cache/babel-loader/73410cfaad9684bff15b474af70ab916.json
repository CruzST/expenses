{"ast":null,"code":"import { ACCESS_TOKEN, SECRET } from \"../Components/Constants/index.js\";\n\nvar jwt = require(\"jsonwebtoken\");\n\nclass Authenticate {\n  // constructor\n  // methods\n  saveToken(tokenName, token) {\n    try {\n      localStorage.setItem(tokenName, token);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  isLoggedIn() {\n    try {\n      let token = localStorage.getItem(ACCESS_TOKEN);\n\n      if (token === null) {\n        return false;\n      }\n\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n  /* Function will access the local storage for the access token and return the sub # which is relevant to the user ID */\n\n\n  getUser() {\n    let token = localStorage.getItem(ACCESS_TOKEN);\n    let decode = jwt.verify(token, SECRET); //console.log(decode);\n\n    let user = {\n      userId: decode.sub,\n      userName: decode.name,\n      userAdmin: decode.admin\n    };\n    return user;\n  }\n\n  removeToken() {\n    localStorage.removeItem(ACCESS_TOKEN);\n  }\n\n}\n\nexport default new Authenticate();","map":{"version":3,"sources":["C:\\Users\\Steve\\Documents\\OSU\\Side Projects\\Expenses\\expenses\\app\\src\\Utils\\authenicate.js"],"names":["ACCESS_TOKEN","SECRET","jwt","require","Authenticate","saveToken","tokenName","token","localStorage","setItem","err","console","log","isLoggedIn","getItem","getUser","decode","verify","user","userId","sub","userName","name","userAdmin","admin","removeToken","removeItem"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,MAAvB,QAAqC,kCAArC;;AACA,IAAIC,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAjB;;AAEA,MAAMC,YAAN,CAAmB;AACjB;AAEA;AACAC,EAAAA,SAAS,CAACC,SAAD,EAAYC,KAAZ,EAAmB;AAC1B,QAAI;AACFC,MAAAA,YAAY,CAACC,OAAb,CAAqBH,SAArB,EAAgCC,KAAhC;AACD,KAFD,CAEE,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAEDG,EAAAA,UAAU,GAAG;AACX,QAAI;AACF,UAAIN,KAAK,GAAGC,YAAY,CAACM,OAAb,CAAqBd,YAArB,CAAZ;;AACA,UAAIO,KAAK,KAAK,IAAd,EAAoB;AAClB,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KAND,CAME,OAAOG,GAAP,EAAY;AACZ,aAAO,KAAP;AACD;AACF;AAED;;;AACAK,EAAAA,OAAO,GAAG;AACR,QAAIR,KAAK,GAAGC,YAAY,CAACM,OAAb,CAAqBd,YAArB,CAAZ;AACA,QAAIgB,MAAM,GAAGd,GAAG,CAACe,MAAJ,CAAWV,KAAX,EAAkBN,MAAlB,CAAb,CAFQ,CAGR;;AACA,QAAIiB,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAEH,MAAM,CAACI,GADN;AAETC,MAAAA,QAAQ,EAAEL,MAAM,CAACM,IAFR;AAGTC,MAAAA,SAAS,EAAEP,MAAM,CAACQ;AAHT,KAAX;AAKA,WAAON,IAAP;AACD;;AAEDO,EAAAA,WAAW,GAAG;AACZjB,IAAAA,YAAY,CAACkB,UAAb,CAAwB1B,YAAxB;AACD;;AAvCgB;;AAyCnB,eAAe,IAAII,YAAJ,EAAf","sourcesContent":["import { ACCESS_TOKEN, SECRET } from \"../Components/Constants/index.js\";\r\nvar jwt = require(\"jsonwebtoken\");\r\n\r\nclass Authenticate {\r\n  // constructor\r\n\r\n  // methods\r\n  saveToken(tokenName, token) {\r\n    try {\r\n      localStorage.setItem(tokenName, token);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  isLoggedIn() {\r\n    try {\r\n      let token = localStorage.getItem(ACCESS_TOKEN);\r\n      if (token === null) {\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /* Function will access the local storage for the access token and return the sub # which is relevant to the user ID */\r\n  getUser() {\r\n    let token = localStorage.getItem(ACCESS_TOKEN);\r\n    let decode = jwt.verify(token, SECRET);\r\n    //console.log(decode);\r\n    let user = {\r\n      userId: decode.sub,\r\n      userName: decode.name,\r\n      userAdmin: decode.admin\r\n    };\r\n    return user;\r\n  }\r\n\r\n  removeToken() {\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n  }\r\n}\r\nexport default new Authenticate();\r\n"]},"metadata":{},"sourceType":"module"}