{"ast":null,"code":"import axios from \"axios\";\nimport { ACCESS_TOKEN, SECRET, ADMIN_ID, ADMIN_STRING } from \"../Components/Constants/index.js\";\n\nvar jwt = require(\"jsonwebtoken\");\n\nclass Authenticate {\n  // constructor\n  // methods\n  isLoggedIn() {\n    let token = localStorage.getItem(ACCESS_TOKEN);\n\n    if (token) {\n      // add -> redux, if decodedtoken sub is XXX then make admin, else normal user\n      return true;\n    }\n\n    return false;\n  }\n  /* Function will access the local storage for the access token and return the sub # which is relevant to the user ID */\n\n\n  getUserId() {\n    let token = localStorage.getItem(ACCESS_TOKEN);\n    let decode = jwt.verify(token, SECRET);\n    return decode.sub;\n  }\n\n  async isAdmin(userId) {\n    console.log(\"isadmin called\");\n    let flag = false;\n\n    if (userId === ADMIN_ID) {\n      console.log(userId, ADMIN_ID);\n      await axios.get(\"/api/users/\".concat(userId)).then(res => {\n        const rolesArray = res.data.roles;\n        rolesArray.forEach(element => {\n          if (element.name === ADMIN_STRING) {\n            flag = true;\n          }\n        });\n        return flag;\n      });\n    } else {\n      return flag;\n    }\n  }\n\n  removeToken() {\n    localStorage.removeItem(ACCESS_TOKEN);\n  }\n\n}\n\nexport default new Authenticate();","map":{"version":3,"sources":["C:\\Users\\Steve\\Documents\\OSU\\Side Projects\\Expenses\\expenses\\app\\src\\Utils\\authenicate.js"],"names":["axios","ACCESS_TOKEN","SECRET","ADMIN_ID","ADMIN_STRING","jwt","require","Authenticate","isLoggedIn","token","localStorage","getItem","getUserId","decode","verify","sub","isAdmin","userId","console","log","flag","get","then","res","rolesArray","data","roles","forEach","element","name","removeToken","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,YADF,EAEEC,MAFF,EAGEC,QAHF,EAIEC,YAJF,QAKO,kCALP;;AAMA,IAAIC,GAAG,GAAGC,OAAO,CAAC,cAAD,CAAjB;;AAEA,MAAMC,YAAN,CAAmB;AACjB;AAEA;AACAC,EAAAA,UAAU,GAAG;AACX,QAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBV,YAArB,CAAZ;;AACA,QAAIQ,KAAJ,EAAW;AACT;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;AAED;;;AACAG,EAAAA,SAAS,GAAG;AACV,QAAIH,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqBV,YAArB,CAAZ;AACA,QAAIY,MAAM,GAAGR,GAAG,CAACS,MAAJ,CAAWL,KAAX,EAAkBP,MAAlB,CAAb;AACA,WAAOW,MAAM,CAACE,GAAd;AACD;;AAED,QAAMC,OAAN,CAAcC,MAAd,EAAsB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,QAAIC,IAAI,GAAG,KAAX;;AACA,QAAIH,MAAM,KAAKd,QAAf,EAAyB;AACvBe,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoBd,QAApB;AACA,YAAMH,KAAK,CAACqB,GAAN,sBAAwBJ,MAAxB,GAAkCK,IAAlC,CAAuCC,GAAG,IAAI;AAClD,cAAMC,UAAU,GAAGD,GAAG,CAACE,IAAJ,CAASC,KAA5B;AACAF,QAAAA,UAAU,CAACG,OAAX,CAAmBC,OAAO,IAAI;AAC5B,cAAIA,OAAO,CAACC,IAAR,KAAiBzB,YAArB,EAAmC;AACjCgB,YAAAA,IAAI,GAAG,IAAP;AACD;AACF,SAJD;AAKA,eAAOA,IAAP;AACD,OARK,CAAN;AASD,KAXD,MAWO;AACL,aAAOA,IAAP;AACD;AACF;;AAEDU,EAAAA,WAAW,GAAG;AACZpB,IAAAA,YAAY,CAACqB,UAAb,CAAwB9B,YAAxB;AACD;;AAzCgB;;AA2CnB,eAAe,IAAIM,YAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  ACCESS_TOKEN,\r\n  SECRET,\r\n  ADMIN_ID,\r\n  ADMIN_STRING\r\n} from \"../Components/Constants/index.js\";\r\nvar jwt = require(\"jsonwebtoken\");\r\n\r\nclass Authenticate {\r\n  // constructor\r\n\r\n  // methods\r\n  isLoggedIn() {\r\n    let token = localStorage.getItem(ACCESS_TOKEN);\r\n    if (token) {\r\n      // add -> redux, if decodedtoken sub is XXX then make admin, else normal user\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /* Function will access the local storage for the access token and return the sub # which is relevant to the user ID */\r\n  getUserId() {\r\n    let token = localStorage.getItem(ACCESS_TOKEN);\r\n    let decode = jwt.verify(token, SECRET);\r\n    return decode.sub;\r\n  }\r\n\r\n  async isAdmin(userId) {\r\n    console.log(\"isadmin called\");\r\n    let flag = false;\r\n    if (userId === ADMIN_ID) {\r\n      console.log(userId, ADMIN_ID);\r\n      await axios.get(`/api/users/${userId}`).then(res => {\r\n        const rolesArray = res.data.roles;\r\n        rolesArray.forEach(element => {\r\n          if (element.name === ADMIN_STRING) {\r\n            flag = true;\r\n          }\r\n        });\r\n        return flag;\r\n      });\r\n    } else {\r\n      return flag;\r\n    }\r\n  }\r\n\r\n  removeToken() {\r\n    localStorage.removeItem(ACCESS_TOKEN);\r\n  }\r\n}\r\nexport default new Authenticate();\r\n"]},"metadata":{},"sourceType":"module"}